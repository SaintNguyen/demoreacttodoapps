[{"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\index.js":"1","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Comment.jsx":"2","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\modals\\EditTask.js":"3","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Product.jsx":"4","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\About.jsx":"5","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\components\\TodoList.js":"6","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Analytics.jsx":"7","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\reportWebVitals.js":"8","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\ProductList.jsx":"9","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\App.js":"10","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Dashboard.jsx":"11"},{"size":500,"mtime":1619253139000,"results":"12","hashOfConfig":"13"},{"size":9059,"mtime":1666347603902,"results":"14","hashOfConfig":"13"},{"size":2232,"mtime":1664846499143,"results":"15","hashOfConfig":"13"},{"size":162,"mtime":1666204897911,"results":"16","hashOfConfig":"13"},{"size":2194,"mtime":1666205093977,"results":"17","hashOfConfig":"13"},{"size":2431,"mtime":1666204952326,"results":"18","hashOfConfig":"13"},{"size":168,"mtime":1666204878214,"results":"19","hashOfConfig":"13"},{"size":362,"mtime":1619253139000,"results":"20","hashOfConfig":"13"},{"size":175,"mtime":1649877227000,"results":"21","hashOfConfig":"13"},{"size":1103,"mtime":1666342484962,"results":"22","hashOfConfig":"13"},{"size":1841,"mtime":1666344466678,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"5kf94d",{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\index.js",[],["51","52"],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Comment.jsx",["53","54","55","56","57"],"import React from 'react';\nimport image from \"../images/bot_image.jpg\";\nimport { useState, useRef } from \"react\";\nfunction Comment() {\n    const humanMessage = useRef();\n  const botmessage = useRef();\n  const input = useRef();\n\n  const date = new Date();\n  const hours = date.getHours();\n  const seconds = date.getSeconds();\n  const day = date.getDay();\n  const month = date.getMonth();\n  const year = date.getFullYear();\n\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const [time, setTime] = useState(`${hours}:${seconds}`); //using the useState hook to get the data from the local time and set it to the time variable\n  const [dateTime, setDateTime] = useState(\n    `${days[day]}, ${months[month]} ${year}`\n  ); //using the useState hook to get the data from the local date and set it to the dateTime variable\n\n  const checkStatus = (e) => {\n    let isActive = true;\n    if (dateTime === \"Thursday, Aug 13 2022\") {\n      //if the dateTime is Thursday, 13 Aug 2022, the bot will be inactive\n      isActive = false;\n    }\n    const status = document.querySelector(\".status\");\n    // selecting the status class\n    if (isActive === true) {\n      //if the bot is active\n      status.innerHTML = \"Active\";\n      status.style.color = \"green\";\n    } else {\n      status.innerHTML = \"Not Active\";\n      status.style.color = \"red\";\n    }\n  };\n  const handleInput = () => {\n    const botMessage = document.querySelector(\"#message1\");\n    const userMessage = document.querySelector(\"#message2\");\n    const inputRef = input.current;\n    const getHumanMessage = humanMessage.current;\n    const getBotMessage = botmessage.current;\n\n    let badwords = [\"fuck|bad|stupid|useless|bitch|crazy|nonsense\"];\n    let words = new RegExp(badwords);\n    if (words.test(document.querySelector(\"#input\").value)) {\n      // if the input contains bad words\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"Please do not use bad words\"; // display the message\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n    let welcome = [\n      \"hi|hello|Hello|hey|sup|yo|wassup|whats up|howdy|greetings|good morning|good afternoon|good evening\",\n    ];\n    let words2 = new RegExp(welcome);\n    if (words2.test(document.querySelector(\"#input\").value)) {\n      const status = document.querySelector(\".status\");\n      // if the input contains welcome words\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"Hello There how are you doing today?\"; // display the message\n        status.innerText = \"Active\";\n        status.style.color = \"green\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n    let bye = [\"bye|Bye|goodbye|see you later|cya|goodnight|goodbye\"];\n    let words3 = new RegExp(bye);\n    if (words3.test(document.querySelector(\"#input\").value)) {\n      const status = document.querySelector(\".status\");\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"Bye, have a nice day\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n      setTimeout(() => {\n        status.innerText = \"Not active\";\n        status.style.color = \"red\";\n      }, 5000);\n    }\n    let thanks = [\n      \"Thanks|thanks|thank you|thank you very much|Thank you very much\",\n    ];\n    let words4 = new RegExp(thanks);\n    if (words4.test(document.querySelector(\"#input\").value)) {\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"You are welcome\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n    let how = [\n      \"How are you|how are you doing|how are you doing today|how are you doing today|How are you|how are you\",\n    ];\n    let words5 = new RegExp(how);\n    if (words5.test(document.querySelector(\"#input\").value)) {\n      const status = document.querySelector(\".status\");\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"I am fine, thank you\";\n        status.innerText = \"Active\";\n        status.style.color = \"green\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n    let good = [\n      \"That's good|Sound nice|that sounds awesome|that sounds great|Great|great|sounds great|that's sounds good|Nice|nice\",\n    ];\n    let words6 = new RegExp(good);\n    if (words6.test(document.querySelector(\"#input\").value)) {\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"😁\";\n        inputRef.value = \"\"; // clear the input\n      }, 1000);\n    }\n\n    let response = [\n      \"I'm fine|I am fine|I am fine today|I am fine today|i'm fine|i'm great|I'm fine|I'm great|I'm good|i'm good|great|Great\",\n    ];\n    let words7 = new RegExp(response);\n    if (words7.test(document.querySelector(\"#input\").value)) {\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"That is good\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n\n    let nameAsk = [\n      \"What's your name|what's your name|What is your name|what is your name\",\n    ];\n    let words8 = new RegExp(nameAsk);\n    if (words8.test(document.querySelector(\"#input\").value)) {\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"My name is Bot. What support do you need from me ?\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n\n    let owner = [\n      \"Who is the owner|who is the owner|Who is the owner of this bot|who is the owner of this bot|Who made you|who made you|Who is your maker|Who made you|who is your maker|who is your owner|Who is your owner\",\n    ];\n    let words9 = new RegExp(owner);\n    if (words9.test(document.querySelector(\"#input\").value)) {\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"The owner of this bot is Treasure\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n\n    let owner2 = [\n      \"Who's Treasure|who's Treasure|Who is Treasure|who is Treasure\",\n    ];\n    let words10 = new RegExp(owner2);\n    if (words10.test(document.querySelector(\"#input\").value)) {\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText =\n          \"Treasure is a programmer based on ReactJS and NodeJS he is the owner of a youtube channel called Creative Tutorials\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n\n    let ageAsk = [\n      \"What's your age|what's your age|What is your age|what is your age|How old are you|how old are you\",\n    ]; //adding the age-question\n    let words11 = new RegExp(ageAsk);\n    if (words11.test(document.querySelector(\"#input\").value)) {\n      // if the input contains some question\n      getBotMessage.innerText = \"Typing...\";\n      setTimeout(() => {\n        getBotMessage.innerText = \"I am 1 year old\";\n        inputRef.value = \"\"; // clear the input\n      }, 2000);\n    }\n    getHumanMessage.innerText = inputRef.value; // display the message\n  };\n  return (\n    <div className=\"App1\" onLoad={checkStatus}>\n      <div className=\"wrapper\">\n        <div className=\"content\">\n        <div className = \"header1 text-center\">\n        <h2 className=\"gradient-text\">PLESE MESSAGE ME 😁! </h2></div>\n          <div className=\"header\">\n            <div className=\"img\">\n              <img src={image} alt=\"\" />\n            </div>\n            <div className=\"right\">\n              <div className=\"name\">ChatBot</div>\n              <div className=\"status\">Active</div>\n            </div>\n          </div>\n          <div className=\"main\">\n            <div className=\"main_content\">\n              <div className=\"messages\">\n                <div\n                  className=\"bot-message\"\n                  id=\"message1\"\n                  ref={botmessage}\n                ></div>\n                <div\n                  className=\"human-message\"\n                  id=\"message2\"\n                  ref={humanMessage}\n                ></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"bottom\">\n            <div className=\"btm\">\n              <div className=\"input\">\n                <input\n                  type=\"text\"\n                  id=\"input\"\n                  placeholder=\"Enter your message\"\n                  ref={input}\n                />\n              </div>\n              <div className=\"btn\">\n                <button onClick={handleInput}>\n                  <i className=\"fas fa-paper-plane\"></i>Send\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\modals\\EditTask.js",["58"],"import React, { useState , useEffect} from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\n    const [taskName, setTaskName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const handleChange = (e) => {\n        \n        const {name, value} = e.target\n\n        if(name === \"taskName\"){\n            setTaskName(value)\n        }else{\n            setDescription(value)\n        }\n\n\n    }\n\n    useEffect(() => {\n        setTaskName(taskObj.Name)\n        setDescription(taskObj.Description)\n    },[])\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        let tempObj = {}\n        tempObj['Name'] = taskName\n        tempObj['Description'] = description\n        updateTask(tempObj)\n    }\n\n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader style={{\"background-color\": \"#000\"}} toggle={toggle}><h2 className=\"gradient-text\">Update Task</h2></ModalHeader>\n            <ModalBody style={{\"background-color\": \"#000\"}}>\n            \n                    <div className = \"form-group\">\n                        <label className=\"gradient-text\"><h7>Task Name</h7></label>\n                        <input type=\"text\" style={{\"font-family\": \"Archivo Black, sans-serif\", \"font-size\": \"20px\"}} className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\n                    </div>\n                    <div className = \"form-group\">\n                        <label className=\"gradient-text\"><h7>Description</h7></label>\n                        <textarea rows = \"5\" style={{\"font-family\": \"Great Vibes, cursive\", \"font-size\": \"22px\"}} className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\n                    </div>\n                \n            </ModalBody>\n            <ModalFooter>\n            <Button className = \"button-85\" role=\"button\" onClick={handleUpdate}><h6 className=\"gradient-text\">Update</h6></Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}><h6>Cancel</h6></Button>\n            </ModalFooter>\n      </Modal>\n    );\n};\n\nexport default EditTaskPopup;","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Product.jsx",[],["59","60"],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\About.jsx",[],["61","62"],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\components\\TodoList.js",["63"],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Analytics.jsx",[],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\reportWebVitals.js",[],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\ProductList.jsx",[],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\App.js",[],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Dashboard.jsx",["64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":39,"column":10,"nodeType":"71","messageId":"72","endLine":39,"endColumn":14},{"ruleId":"69","severity":1,"message":"73","line":39,"column":16,"nodeType":"71","messageId":"72","endLine":39,"endColumn":23},{"ruleId":"69","severity":1,"message":"74","line":40,"column":20,"nodeType":"71","messageId":"72","endLine":40,"endColumn":31},{"ruleId":"69","severity":1,"message":"75","line":62,"column":11,"nodeType":"71","messageId":"72","endLine":62,"endColumn":21},{"ruleId":"69","severity":1,"message":"76","line":63,"column":11,"nodeType":"71","messageId":"72","endLine":63,"endColumn":22},{"ruleId":"77","severity":1,"message":"78","line":24,"column":7,"nodeType":"79","endLine":24,"endColumn":9,"suggestions":"80"},{"ruleId":"65","replacedBy":"81"},{"ruleId":"67","replacedBy":"82"},{"ruleId":"65","replacedBy":"83"},{"ruleId":"67","replacedBy":"84"},{"ruleId":"69","severity":1,"message":"85","line":15,"column":12,"nodeType":"71","messageId":"72","endLine":15,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":50,"column":13,"nodeType":"88","endLine":50,"endColumn":93},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'time' is assigned a value but never used.","Identifier","unusedVar","'setTime' is assigned a value but never used.","'setDateTime' is assigned a value but never used.","'botMessage' is assigned a value but never used.","'userMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'taskObj.Description' and 'taskObj.Name'. Either include them or remove the dependency array. If 'setTaskName' needs the current value of 'taskObj.Name', you can also switch to useReducer instead of useState and read 'taskObj.Name' in the reducer.","ArrayExpression",["91"],["89"],["90"],["89"],["90"],"'taskList' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [taskObj.Description, taskObj.Name]",{"range":"94","text":"95"},[628,630],"[taskObj.Description, taskObj.Name]"]